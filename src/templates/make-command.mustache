{{#showComments}}
/* Command Descritption
 * Filename on disk must match the module name property
 * It will accept kebabCase or camelCase from module name
 * Example name 'hello:world' will find command filename 'helloWorld.js' or 'hello-world.js'
 *
 * Each command has the following keys
 *  - name: command name (showed in help)
 *  - description: command description (showed in help)
 *  - disabled [optional]: <true|false> if true, the command will not be executable
 *  - hidden [optional]: <true|false> if true, the command will not be available when showing help
 *  - usage [optional]: description of how to use command (showed in help)
 *  - arguments [optional]: positional arguments (name will always be required)
      - name: created command name (required: true)
 *  - flags [object]: each flag object contains the following properties
 *    - name: command name (example make:command)
 *    - aliases [optional]: array of flag aliass
 *    - description [optional: Command description (displayed when show help)
 *    - required [optional]: <true|false> optional parameter if flag is required
 */
{{/showComments}}

{{#testing}}
const {colors, helpers, print} = require('../gunner')
{{/testing}}
{{^testing}}
const {colors, helpers, print} = require('@codedungeon/gunner')
{{/testing}}

module.exports = {
  name: '{{command}}',
  description: '{{description}}',
  disabled: false,
  hidden: {{hidden}},
  usage: `{{command}} ${colors.magenta('<resource>')} ${colors.blue('[options]')}`,
  usePrompts: true,
  {{#showArguments}}
  arguments: {
    name: {
      description: 'Sub Command',
      required: true,
      prompt: {
        type: 'input',
        hint: '(as it will be saved on disk)',
      },
    },
  },
  {{/showArguments}}
  flags: {
    // example flag, adjust accordingly
    test: {
      aliases: ['t'],
      description: 'Use Tests',
      required: false,
      prompt: { type: 'confirm', hint: 'Would you like to create tests?' },
    },
  },

  async execute(toolbox) {
    {{#quiet}}
    /*
     * - you can use the following variables when creating your command
     * - toolbox.commandName
     * - toolbox.arguments
     */
     {{/quiet}}
    // example retrieving global option
    let quiet = toolbox.getOptionValue(toolbox.arguments, ['quiet', 'q'])

    let args = helpers.getArguments(toolbox.arguments, this.flags)
    let answers = this.usePrompts ? await toolbox.prompts.run(toolbox, this) : []

    // merge args and answers
    let flags = { ...args, ...answers }
    console.log({
      subCommand: toolbox.commandName || flags.commandName,
      arguments: toolbox.arguments,
      flags,
    })
  }
}
